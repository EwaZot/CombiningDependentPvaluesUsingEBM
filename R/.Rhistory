pop.var <- function(x) var(x) * (length(x)-1) / length(x)
pop.sd <- function(x) sqrt(pop.var(x))
transformData <- function(data_vector) {
dvm = mean(data_vector)
dvsd = pop.sd(data_vector)
s = (data_vector-dvm)/dvsd
distr = ecdf(s)
sapply(s, function(a) -2*log(distr(a)))
}
calculateCovariances <- function(data_matrix){
transformed_data_matrix = apply(data_matrix, MARGIN=1, FUN=transformData)
covar_matrix = cov(transformed_data_matrix)
covar_matrix
}
combinePValues <- function(covar_matrix, p_values, extra_info = F){
N = ncol(covar_matrix) # number of samples
df_fisher = 2.0*N
Expected  = 2.0*N
cov_sum <- (2*sum(covar_matrix[lower.tri(covar_matrix, diag=F)]))
Var = 4.0*N+cov_sum
c = Var/(2.0*Expected)
df_brown = (2.0*Expected^2)/Var
if (df_brown > df_fisher) {
df_brown = df_fisher
c = 1.0
}
x = 2.0*sum( -log(p_values) )
p_brown = pchisq(df=df_brown, q=x/c, lower.tail=F)
p_fisher = pchisq(df=df_fisher, q=x, lower.tail=F)
if (extra_info) {
return(list(P_Brown=p_brown, P_Fisher=p_fisher, Scale_Factor_C=c, DF_Brown=df_brown))
}
else {
return(p_brown)
}
}
empiricalBrownsMethod <- function(data_matrix, p_values, extra_info = F) {
# inputs must be numeric
covar_matrix = calculateCovariances(data_matrix)
return(combinePValues(covar_matrix, p_values, extra_info))
}
